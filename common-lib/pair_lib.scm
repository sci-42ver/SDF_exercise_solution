(define new-pair list)
(define pair?* list)
(define get-left car)
(define get-right cadr)
(define (change-pair-right! pair target) 
  (assert (eq? (car target) (car pair)))
  (set-cdr! pair (cdr target)))
(cd "~/SICP_SDF/SDF_exercises/chapter_5")
(load "../common-lib/tagged_lst_lib.scm")
(load "../common-lib/logic_lib.scm")
(define get-pairs get-tagged-lst-data)
(define (%add-pair-to-tagged-pairs! pair tagged-pairs #!optional pairs)
  (set-cdr! tagged-pairs (cons pair (or* pairs (get-pairs tagged-pairs)))))
(define (add-pair-to-tagged-pairs! pair tagged-pairs)
  (let ((pairs (get-pairs tagged-pairs)))
    (let ((val (assq (get-left pair) pairs)))
      (if (not val)
        (%add-pair-to-tagged-pairs! pair tagged-pairs pairs)
        (change-pair-right! val pair)))
    tagged-pairs
    )
  )

(define (set-tagged-pairs! key val tagged-pairs)
  (let ((pair (find-var key tagged-pairs)))
    (if pair
      (begin
        (write-line (list "INFO set-tagged-pairs! resets" pair "val to" val))
        (set-cdr! pair (list val)))
      (%add-pair-to-tagged-pairs! (list key val) tagged-pairs))
    )
  )
