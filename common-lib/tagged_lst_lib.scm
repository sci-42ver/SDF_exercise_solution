(define (empty-tagged-lst tag) (list tag))
(define (new-tagged-lst tag data) (cons tag data))

(define get-tag car)
(define get-data cdr)
(define (get-first-datum tagged-lst)
  (if (empty-tagged-lst? tagged-lst)
    (error "can't get-first-datum for one empty tagged-lst")
    (first (get-data tagged-lst)))
  )

(define (find-var var tagged-lst) 
  (let ((data (get-data tagged-lst)))
    (assert (every list? data))
    (assq var data)
    )
  )

(define (insert-elem-to-data-end elem tagged-lst)
  (let ((data (get-data tagged-lst)))
    (new-tagged-lst (get-tag tagged-lst) (append data (list elem))))
  )

(define (insert-elem-to-data-beginning elem tagged-lst)
  (let ((data (get-data tagged-lst)))
    (new-tagged-lst (get-tag tagged-lst) (cons elem data)))
  )
(define (insert-elem-to-data-beginning! elem tagged-lst)
  (let ((data (get-data tagged-lst)))
    (set-cdr! tagged-lst (cons elem data)))
  )

(define (empty-tagged-lst? tagged-lst)
  (null? (get-data tagged-lst)))
