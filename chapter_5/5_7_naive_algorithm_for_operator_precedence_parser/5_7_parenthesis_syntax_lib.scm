(define (item? obj)
  (or (string? obj)
    (item-list? obj)
    )
  )
(define (item-list? obj)
  (and (list? obj)
    (every item? obj)
    )
  )

(define from-left-to-right-tag 'from-left-to-right)
(define from-right-to-left-tag 'from-right-to-left)
(define (new-from-left-to-right-precedence-items . data)
  (new-tagged-lst from-left-to-right-tag data))
(define (from-left-to-right-precedence-items? data)
  (tagged-list? data from-left-to-right-tag))
(define (new-from-right-to-left-precedence-items . data)
  (new-tagged-lst from-right-to-left-tag data))
(define (from-right-to-left-precedence-items? data)
  (tagged-list? data from-right-to-left-tag))

(define (new-delimit-then-divide-exp data)
  (new-tagged-lst 'delimit-then-divide data)
  )
(define (new-delimit-exp data)
  (new-tagged-lst 'delimit data)
  )
(define (new-exact-exp data)
  (new-tagged-lst 'exact data)
  )
(define (new-non-obj-before-exp data)
  (new-tagged-lst 'non-obj-before data)
  )
(define (new-delimit-exp data)
  (new-tagged-lst 'delimit data)
  )
